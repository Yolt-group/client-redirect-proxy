worker_processes  auto;
error_log         /dev/stderr warn;
pid               /tmp/nginx.pid;
events {
    worker_connections  1024;
}

http {
    include mime.types;
    log_format json_combined escape=json
    '{'
        '"timestamp":"$formatted_date",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"message":"$message",'
        '"state":"$arg_state",'
        '"level":"$log_level"'
    '}';
    access_log  /dev/stdout json_combined;

    # format our timestamp as 2020-01-01T23:59:59.00Z instead of the default 2020-01-01T23:59:59+00+00 to make sure it ends up in our logging system 
    map $time_iso8601 $formatted_date {
        default 'date-not-found';
        '~^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})T(?<hour>\d{2}):(?<minute>\d{2}):(?<seconds>\d{2})' ${year}-${month}-${day}T${hour}:${minute}:${seconds}.00Z;
    }

    sendfile           on;
    keepalive_timeout  65;

    ssl_session_cache   shared:SSL:1m;
    ssl_session_timeout 10m;

    proxy_cache off;
    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /vault/secrets/issuing_ca;

    # Change cache directories from /var/cache/nginx/~ to /tmp because the rootfs is mounted ro.
    client_body_temp_path /tmp 1 2;
    proxy_temp_path       /tmp 1 2;
    fastcgi_temp_path     /tmp 1 2;
    uwsgi_temp_path       /tmp 1 2;
    scgi_temp_path        /tmp 1 2;

    server {
        listen              8443 ssl;
        server_name         client-redirect-proxy;
        ssl_certificate     /vault/secrets/cert;
        ssl_certificate_key /vault/secrets/private_key;

        # It is the intention that these two variables are overwritten in all leafs of the control flow.
        # These variables are included in the logging, see json_combined above.
        set $message 'unknown request';
        set $log_level 'ERROR';

        # Banks send users to https://client-redirect.yts.yolt.io?state=...
        # Hence we only proxy when / is requested, all non-root requests are served a 410 Gone, see below.
        location =/ {
            # Hack to enable a conditional proxy_pass.
            error_page 418 = @ais;
            error_page 419 = @pis;

            # if the least significant bit of the uuid is a 0
            if ( $arg_state ~* "[02468ace]$" ) {
                # Add appropriate context path.
                set $message 'OK: proxy to ais';
                set $log_level 'INFO';
                rewrite / /site-management/client-redirect;
                return 418;
            }

            # if the least significant bit of the uuid is a 1
            if ( $arg_state ~* "[13579bdf]$" ) {
                # Add appropriate context path.
                set $message 'OK: proxy to pis';
                set $log_level 'INFO';
                rewrite / /pis/client-redirect;
                return 419;
            }

            #
            # A request without the required state parameter.  Most likely a UK bank.  Serve up a html page
            # to extract the state parameter from the URL fragment in case of a GET request.
            #
            # We **only** serve a page to capture the fragment if the request method is GET.
            # This is necessary to prevent an infinite loop in the trivial case that a client
            # issues a request without a state parameter being present.  This would happen:
            #
            # 1. -> GET /
            #    <- client-redirect.html
            #       browser interprets JavaScript in client-redirect.html and issues request 2
            # 2. -> POST /  (body: "url=/")
            #    <- client-redirect.html
            #       browser interprets JavaScript in client-redirect.html and issues request 2
            # <jump to 2, ad inf.>
            #
            # Only serving up the client-redirect.html page on a GET request prevents the above.
            #
            if ( $request_method = 'GET' ) {
                set $message 'serving html page to retrieve fragment';
                set $log_level 'INFO';
                rewrite / /client-redirect.html last;
            }

            # We get here if the client has issued a POST request and there is no
            # "state" query parameter that ends in [0-9a-fA-F]
            set $message 'KO: post without valid state';
            set $log_level 'ERROR';
            return 301 https://www.yolt.com/error-pages/not-found;
        }

        location @ais {
            proxy_pass https://site-management;
        }

        location @pis {
            proxy_pass https://pis;
        }

        location =/client-redirect.html {
            # fixme we have a correlation cookie in our codebase that we set here & look at later, not sure about the usefulness of it,
            #       but it does permit us to correlate serving up this page to a later request (so we could check which % of requests)
            #       that we serve this page to return to us later; might be useful?
            root /usr/share/nginx/html;
            index client-redirect.html;
        }

        location =/probe/liveness {
            # k8s liveness probe
            access_log off;
            return 200;
        }

        location =/probe/readiness {
            # k8s readiness probe
            access_log off;
            return 200;
        }

        # Catch all, return 410 Gone
        location ~ {
            set $message 'KO, non-root URL request';
            set $log_level 'WARN';
            return 410;
        }
    }

    #
    # Prometheus metrics.
    #
    # The file /tmp/actuator/metrics is created and updated by a small program that parses stdout of nginx.
    # See the file src/prometheus-exporter.c in this repository.
    #
    server {
        listen              9443 ssl;
        server_name         client-redirect-proxy;
        ssl_certificate     /vault/secrets/cert;
        ssl_certificate_key /vault/secrets/private_key;
        access_log off;

        root /tmp;
    }

}
